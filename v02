<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Virus Spread Game</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.2/p5.min.js"></script>
  <style>
    body { margin: 0; display: flex; justify-content: center; align-items: center; height: 100vh; background: #f0f0f0; }
    canvas { border: 2px solid #333; }
    #resetButton { position: absolute; top: 10px; left: 10px; padding: 10px; font-size: 16px; cursor: pointer; }
    #startButton { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); padding: 20px; font-size: 24px; cursor: pointer; }
  </style>
</head>
<body>
  <button id="resetButton">Reset</button>
  <button id="startButton">Start</button>
<script>
let people = [];
let player;
let moon = null;
let rocket = null;
let infectionRadius = 20;
let gameStarted = false;
let personRadius = 6; // Radius for collision
let nightMode = false;
let nightModeEnd = 0;
let nightModeUses = 3;
let killedInfected = 0;
let nextRocketTime = 0;
let gameStartTime = 0;

class Person {
  constructor(x, y, infected = false) {
    this.x = x;
    this.y = y;
    this.infected = infected;
    this.vx = random(-2, 2);
    this.vy = random(-2, 2);
    this.infectedTime = 0;
    this.flashUntil = 0;
    this.originalVx = this.vx;
    this.originalVy = this.vy;
  }

  move() {
    this.x += this.vx;
    this.y += this.vy;
    // Bounce and constrain to keep on screen
    if (this.x < personRadius || this.x > width - personRadius) {
      this.vx *= -1;
      this.x = constrain(this.x, personRadius, width - personRadius);
    }
    if (this.y < personRadius || this.y > height - personRadius) {
      this.vy *= -1;
      this.y = constrain(this.y, personRadius, height - personRadius);
    }
  }

  stop() {
    this.vx = 0;
    this.vy = 0;
    this.originalVx = 0;
    this.originalVy = 0;
  }

  display() {
    textSize(12);
    textAlign(CENTER, CENTER);
    if (this.infected) {
      if (millis() < this.flashUntil) {
        if (floor(millis() / 200) % 2 === 0) {
          text("❌", this.x, this.y);
        }
      } else {
        text("❌", this.x, this.y);
      }
    } else {
      text("✅", this.x, this.y);
    }
  }

  infect(others, infectedCount) {
    if (!this.infected || infectedCount === 0) return;
    for (let other of others) {
      if (other !== this && !other.infected) {
        let d = dist(this.x, this.y, other.x, other.y);
        if (d < infectionRadius && random() < 0.05) {
          other.infected = true;
          other.vx *= 1.15;
          other.vy *= 1.15;
          other.originalVx = other.vx;
          other.originalVy = other.vy;
          other.infectedTime = millis();
          other.flashUntil = other.infectedTime + 3000;
          if (nightMode && millis() < nightModeEnd) {
            other.vx *= 0.7;
            other.vy *= 0.7;
          }
        }
      }
    }
  }

  bounce(others) {
    for (let other of others) {
      if (other !== this) {
        let d = dist(this.x, this.y, other.x, other.y);
        if (d < 2 * personRadius) {
          let dx = other.x - this.x;
          let dy = other.y - this.y;
          let dvx = other.vx - this.vx;
          let dvy = other.vy - this.vy;
          let dot = dx * dvx + dy * dvy;
          let distSquared = dx * dx + dy * dy;
          
          if (distSquared > 0 && dot < 0) {
            let factor = dot / distSquared;
            let fx = dx * factor;
            let fy = dy * factor;

            this.vx += fx;
            this.vy += fy;
            other.vx -= fx;
            other.vy -= fy;

            let overlap = 2 * personRadius - d;
            let moveFactor = overlap / (2 * d);
            this.x -= dx * moveFactor;
            this.y -= dy * moveFactor;
            other.x += dx * moveFactor;
            other.y += dy * moveFactor;

            this.originalVx = this.vx;
            this.originalVy = this.vy;
            other.originalVx = other.vx;
            other.originalVy = other.vy;
          }
        }
      }
    }
  }

  adjustNightModeSpeed() {
    if (nightMode && millis() < nightModeEnd && this.infected) {
      this.vx = this.originalVx * 0.7;
      this.vy = this.originalVy * 0.7;
    } else if (this.infected) {
      this.vx = this.originalVx;
      this.vy = this.originalVy;
    }
  }
}

class Moon {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }

  display() {
    textSize(16);
    textAlign(CENTER, CENTER);
    text("🌚", this.x, this.y);
  }

  checkBlastCollision(player) {
    if (player.blastActive && millis() < player.blastStart + 3000) {
      let d = dist(this.x, this.y, player.x, player.y);
      let blastRadius = player.superBlast && millis() < player.superBlastEnd ? player.superBlastRadius : player.blastRadius;
      if (d < blastRadius) {
        return true; // Moon caught
      }
    }
    return false;
  }
}

class Rocket {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }

  display() {
    textSize(16);
    textAlign(CENTER, CENTER);
    text("🚀", this.x, this.y);
  }

  checkCollision(player) {
    // Check collision with player directly
    let dPlayer = dist(this.x, this.y, player.x, player.y);
    if (dPlayer < personRadius) {
      return true; // Caught by player
    }
    // Check collision with blast
    if (player.blastActive && millis() < player.blastStart + 3000) {
      let dBlast = dist(this.x, this.y, player.x, player.y);
      let blastRadius = player.superBlast && millis() < player.superBlastEnd ? player.superBlastRadius : player.blastRadius;
      if (dBlast < blastRadius) {
        return true; // Caught by blast
      }
    }
    return false;
  }
}

class Player {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.vx = 0;
    this.vy = 0;
    this.speed = 5;
    this.infected = false;
    this.blastActive = false;
    this.blastStart = 0;
    this.blastRadius = 50;
    this.superBlast = false;
    this.superBlastEnd = 0;
    this.superBlastRadius = 100;
  }

  move() {
    let currentSpeed = (nightMode && millis() < nightModeEnd) ? this.speed * 1.5 : this.speed;

    if (keyIsDown(LEFT_ARROW) || keyIsDown(65)) this.vx = -currentSpeed; // A
    else if (keyIsDown(RIGHT_ARROW) || keyIsDown(68)) this.vx = currentSpeed; // D
    else this.vx = 0;

    if (keyIsDown(UP_ARROW) || keyIsDown(87)) this.vy = -currentSpeed; // W
    else if (keyIsDown(DOWN_ARROW) || keyIsDown(83)) this.vy = currentSpeed; // S
    else this.vy = 0;

    this.x += this.vx;
    this.y += this.vy;

    this.x = constrain(this.x, personRadius, width - personRadius);
    this.y = constrain(this.y, personRadius, height - personRadius);
  }

  display() {
    textSize(16);
    textAlign(CENTER, CENTER);
    text("😈", this.x, this.y);

    if (this.blastActive && millis() < this.blastStart + 3000) {
      noFill();
      stroke(255, 0, 0);
      strokeWeight(2);
      let radius = this.superBlast && millis() < this.superBlastEnd ? this.superBlastRadius : this.blastRadius;
      ellipse(this.x, this.y, radius * 2);
      noStroke();
    } else {
      this.blastActive = false;
    }
  }

  activateBlast() {
    this.blastActive = true;
    this.blastStart = millis();
  }

  activateSuperBlast() {
    this.superBlast = true;
    this.superBlastEnd = millis() + 10000; // 10 seconds
    this.activateBlast();
  }

  checkBlastCollision(people) {
    if (!this.blastActive || millis() > this.blastStart + 3000) return;
    let radius = this.superBlast && millis() < this.superBlastEnd ? this.superBlastRadius : this.blastRadius;
    for (let i = people.length - 1; i >= 0; i--) {
      let person = people[i];
      if (person.infected) {
        let d = dist(this.x, this.y, person.x, person.y);
        if (d < radius + personRadius) {
          people.splice(i, 1); // Remove infected person
          killedInfected++;
          if (killedInfected % 15 === 0) {
            moon = new Moon(random(width), random(height));
          }
        }
      }
    }
  }

  checkInfection(people) {
    for (let person of people) {
      if (person.infected) {
        let d = dist(this.x, this.y, person.x, person.y);
        if (d < infectionRadius) {
          this.infected = true;
          return;
        }
      }
    }
  }
}

function activateNightMode() {
  if (nightModeUses <= 0) return;
  nightMode = true;
  nightModeEnd = millis() + 10000; // 10 seconds
  nightModeUses--;
  for (let person of people) {
    if (person.infected) {
      person.vx *= 0.7;
      person.vy *= 0.7;
    }
  }
}

function resetGame() {
  people = [];
  for (let i = 0; i < 100; i++) {
    people.push(new Person(random(width), random(height), i < 5));
  }
  player = new Player(width / 2, height / 2);
  gameStarted = false;
  nightMode = false;
  nightModeUses = 3;
  killedInfected = 0;
  moon = null;
  rocket = null;
  nextRocketTime = millis() + random(3000, 10000); // Increased rocket frequency
  gameStartTime = 0;
  document.getElementById('startButton').style.display = 'block';
  loop();
}

function startGame() {
  gameStarted = true;
  gameStartTime = millis();
  document.getElementById('startButton').style.display = 'none';
}

function setup() {
  createCanvas(800, 600);
  resetGame();
  document.getElementById('resetButton').addEventListener('click', resetGame);
  document.getElementById('startButton').addEventListener('click', startGame);
}

function draw() {
  background(nightMode && millis() < nightModeEnd ? 0 : 255);

  if (!gameStarted) {
    textSize(40);
    textAlign(CENTER);
    fill(0);
    text("Press Start", width / 2, height / 2);
    return;
  }

  let infectedCount = people.filter(p => p.infected).length;

  // Check win condition first
  if (infectedCount === 0) {
    let elapsedTime = (millis() - gameStartTime) / 1000;
    for (let person of people) {
      person.display();
    }
    player.display();
    if (moon) moon.display();
    if (rocket) rocket.display();
    textSize(40);
    textAlign(CENTER);
    fill(nightMode && millis() < nightModeEnd ? 255 : 0); // White in Night Mode, black otherwise
    text("YOU'RE SAFE! ENJOY $4 ELON BU𝕏", width / 2, height / 2);
    textSize(20);
    text(`Time: ${elapsedTime.toFixed(1)} seconds`, width / 2, height / 2 + 50);
    noLoop();
    return;
  }

  if (!player.infected && infectedCount < 100) {
    // Spawn rocket at random intervals (more frequent)
    if (millis() > nextRocketTime && !rocket) {
      rocket = new Rocket(random(width), random(height));
      nextRocketTime = millis() + random(3000, 10000);
    }

    player.move();
    player.checkBlastCollision(people);
    player.checkInfection(people);

    if (moon && moon.checkBlastCollision(player)) {
      nightModeUses++;
      moon = null;
    }

    if (rocket && rocket.checkCollision(player)) {
      player.activateSuperBlast();
      rocket = null;
      nextRocketTime = millis() + random(3000, 10000);
    }

    for (let person of people) {
      person.bounce(people);
      person.adjustNightModeSpeed();
      person.move();
      person.infect(people, infectedCount); // Pass infectedCount to prevent infections when none remain
      person.display();
    }
    player.display();
    if (moon) moon.display();
    if (rocket) rocket.display();
  } else if (player.infected) {
    let elapsedTime = (millis() - gameStartTime) / 1000;
    for (let person of people) {
      person.display();
    }
    player.display();
    if (moon) moon.display();
    if (rocket) rocket.display();
    textSize(40);
    textAlign(CENTER);
    fill(nightMode && millis() < nightModeEnd ? 255 : 0);
    text("You Got Infected!", width / 2, height / 2);
    textSize(20);
    text(`Time: ${elapsedTime.toFixed(1)} seconds`, width / 2, height / 2 + 50);
    noLoop();
  } else {
    let elapsedTime = (millis() - gameStartTime) / 1000;
    for (let person of people) {
      person.stop();
      person.display();
    }
    player.display();
    if (moon) moon.display();
    if (rocket) rocket.display();
    textSize(40);
    textAlign(CENTER);
    fill(nightMode && millis() < nightModeEnd ? 255 : 0);
    text("ALL REPLYGUYS MARKED AS SPAM 💀", width / 2, height / 2);
    textSize(20);
    text(`Time: ${elapsedTime.toFixed(1)} seconds`, width / 2, height / 2 + 50);
    noLoop();
  }

  textSize(20);
  fill(0);
  textAlign(CENTER);
  text(`Infected: ${infectedCount}`, width / 2, 30);
  text(`Night Mode Uses: ${nightModeUses}`, width / 2, 50);
}

function keyPressed() {
  if (keyCode === 32) { // Spacebar
    if (!gameStarted) {
      startGame();
    } else if (!isLooping()) {
      resetGame();
    } else if (gameStarted && !player.infected) {
      player.activateBlast();
    }
  } else if (keyCode === 70 && gameStarted && !player.infected) { // F key
    activateNightMode();
  }
}
</script>
</body>
</html>
